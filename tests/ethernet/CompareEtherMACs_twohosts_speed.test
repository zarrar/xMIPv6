%description:
Testing EtherMac communications 
    10Mbps half duplex
    10Mbps full duplex
   100Mbps half duplex
   100Mbps full duplex
  1000Mbps full duplex
%#--------------------------------------------------------------------------------------------------------------
%testprog: opp_run
%#--------------------------------------------------------------------------------------------------------------
%file: test.ned

import ned.DatarateChannel;
import inet.nodes.ethernet.EtherHost;
import inet.nodes.ethernet.EtherHostQ;

network CompareMACs
{
    types:
        channel C extends DatarateChannel
        {
            delay = 0s;
            datarate = 1000Mbps;
        }

    submodules:
        host_iq_1_F_A: EtherHost {
            parameters:
                @display("p=70,70");
        }
        host_iq_1_F_B: EtherHost {
            parameters:
                @display("p=210,70");
        }
        host_eq_1_F_A: EtherHostQ {
            parameters:
                @display("p=70,140");
        }
        host_eq_1_F_B: EtherHostQ {
            parameters:
                @display("p=210,140");
        }
        host_iq_2_F_A: EtherHost {
            parameters:
                macType = "EtherMACFullDuplex";
                @display("p=70,210");
        }
        host_iq_2_F_B: EtherHost {
            parameters:
                macType = "EtherMACFullDuplex";
                @display("p=210,210");
        }
        host_eq_2_F_A: EtherHostQ {
            parameters:
                macType = "EtherMACFullDuplex";
                @display("p=70,280");
        }
        host_eq_2_F_B: EtherHostQ {
            parameters:
                macType = "EtherMACFullDuplex";
                @display("p=210,280");
        }

    connections:
        host_iq_1_F_A.ethg <--> C <--> host_iq_1_F_B.ethg;
        host_eq_1_F_A.ethg <--> C <--> host_eq_1_F_B.ethg;
        host_iq_2_F_A.ethg <--> C <--> host_iq_2_F_B.ethg;
        host_eq_2_F_A.ethg <--> C <--> host_eq_2_F_B.ethg;
}

%#--------------------------------------------------------------------------------------------------------------
%inifile: omnetpp.ini

[General]
sim-time-limit = 1s

tkenv-plugin-path = ../../../etc/plugins
#record-eventlog = true
**.vector-recording = false

network = CompareMACs


*.host_iq_1_F_A.cli.destAddress = "host_iq_1_F_B"
*.host_iq_1_F_B.cli.destAddress = "host_iq_1_F_A"

*.host_eq_1_F_A.cli.destAddress = "host_eq_1_F_B"
*.host_eq_1_F_B.cli.destAddress = "host_eq_1_F_A"

*.host_iq_2_F_A.cli.destAddress = "host_iq_2_F_B"
*.host_iq_2_F_B.cli.destAddress = "host_iq_2_F_A"

*.host_eq_2_F_A.cli.destAddress = "host_eq_2_F_B"
*.host_eq_2_F_B.cli.destAddress = "host_eq_2_F_A"

**.cli.reqLength = 1250B       # 10.000 bit
**.cli.respLength = 0B      # no response

*.host_*_A.cli.startTime = 0s
*.host_*_B.cli.startTime = 10000s # out of simulation time

*.host_*_F_*.mac.duplexEnabled = true

*.host_*_F_*.cli.waitTime = 0.009ms       # 1000Mbps 10.000 / speed [ / 2 when halfduplex]
#*.host_*_F_*.cli.waitTime  = 0.05ms        # 100Mbps  10.000 / speed [ / 2 when halfduplex]
#*.host_*_F_*.cli.waitTime   = 0.9ms           # 10Mbps   10.000 / speed [ / 2 when halfduplex]

**.mac.address = "auto"
*.host_iq_*.mac.txQueueLimit = 100000
*.host_eq_*.queue.frameCapacity = 100

%#--------------------------------------------------------------------------------------------------------------
%postprocess-script: check.r
#!/usr/bin/env Rscript

options(echo=FALSE)
options(width=160)
library("omnetpp", warn.conflicts=FALSE)

#TEST parameters
scafile <- 'results/General-0.sca'
linecount <- 4
idlelimit <- 2.0
usedlimit <- 98.0

# begin TEST:

dataset <- loadDataset(scafile)

cat("\nOMNETPP TEST RESULT:\n")

cat("\nCHECK SENT PACKETS:\n")

x <- dataset$scalars[dataset$scalars$name == "sentPkBytes:count",]
xx <- x[grep("_F_A.cli$",x$module)==1,]

if(length(xx$value) != linecount)
{
    cat("LINECOUNT INCORRECT\n")
    print(xx)
} else {
    cat("LINECOUNT CORRECT\n")

#   one packet different is acceptable, because the first event of endtime is processed.
    if( 1 >= (max(xx$value) - min(xx$value)))
    {
        cat("NUMBER OF SENT PACKETS ARE EQUALS\n")
    } else {
        cat("NUMBER OF SENT PACKETS ARE DIFFERS\n")
        print(xx)
    }
}

x <- dataset$scalars[grep("_F_B.mac$",dataset$scalars$module),]

cat("\nCHECK RX CHANNEL IDLE RATES:\n")

xx <- x[x$name == "rx channel idle (%)",]

if(length(xx$value) != linecount)
{
    cat("LINECOUNT INCORRECT\n")
    print(xx)
} else {
    cat("LINECOUNT CORRECT\n")
    if(max(xx$value) <= idlelimit)
    {
        cat("IDLE OK\n")
    } else {
        cat("IDLE BAD:\n")
        print(xx[xx$value > idlelimit,])
    }
}

cat("\nCHECK RX CHANNEL UTILIZATION RATES:\n")

xx <- x[x$name == "rx channel utilization (%)",]

if(length(xx$value) != linecount)
{
    cat("LINECOUNT INCORRECT\n")
    print(xx)
} else {
    cat("LINECOUNT CORRECT\n")
    if(min(xx$value) >= usedlimit)
    {
        cat("USED OK\n")
    } else {
        cat("USED BAD:\n")
        print(xx[xx$value < usedlimit,])
    }
}

cat("\n")

%#--------------------------------------------------------------------------------------------------------------
%contains: check.r.out

OMNETPP TEST RESULT:

CHECK SENT PACKETS:
LINECOUNT CORRECT
NUMBER OF SENT PACKETS ARE EQUALS

CHECK RX CHANNEL IDLE RATES:
LINECOUNT CORRECT
IDLE OK

CHECK RX CHANNEL UTILIZATION RATES:
LINECOUNT CORRECT
USED OK

%#--------------------------------------------------------------------------------------------------------------
