%description:
Testing EtherMac communications 
    10Mbps half duplex
    10Mbps full duplex
   100Mbps half duplex
   100Mbps full duplex
  1000Mbps full duplex
%#--------------------------------------------------------------------------------------------------------------
%testprog: opp_run
%#--------------------------------------------------------------------------------------------------------------
%file: test.ned
import ned.DatarateChannel;
import inet.nodes.ethernet.EtherHostQ;
import inet.linklayer.ethernet.EtherBus;

//
// Sample Ethernet LAN: hosts connected via switch
//
network SpeedTest
{
    types:
        channel C10 extends DatarateChannel
        {
            delay = 0s;
            datarate = 10Mbps;
        }
        channel C100 extends DatarateChannel
        {
            delay = 0s;
            datarate = 100Mbps;
        }
        channel C1000 extends DatarateChannel
        {
            delay = 0s;
            datarate = 1000Mbps;
        }
    submodules:
        host_1_H_A: EtherHostQ {
            parameters:
                @display("p=70,70");
        }
        host_1_H_B: EtherHostQ {
            parameters:
                @display("p=210,70");
        }
        host_2_H_A: EtherHostQ {
            parameters:
                @display("p=70,140");
        }
        host_2_H_B: EtherHostQ {
            parameters:
                @display("p=210,140");
        }
        host_3_H_A: EtherHostQ {
            parameters:
                @display("p=70,210");
        }
        host_3_H_B: EtherHostQ {
            parameters:
                @display("p=210,210");
        }
        host_4_H_A: EtherHostQ {
            parameters:
                @display("p=70,280");
        }
        host_4_H_B: EtherHostQ {
            parameters:
                @display("p=210,280");
        }
        host_5_H_A: EtherHostQ {
            parameters:
                @display("p=70,350");
        }
        host_5_H_B: EtherHostQ {
            parameters:
                @display("p=210,350");
        }
        bus: EtherBus {
            parameters:
                positions = "10 20 30 40 50 60 70 80 90 100";
                propagationSpeed = 2e8 mps; // 1us = 200m
                @display("p=277,182;b=424,6;o=#408060");
            gates:
                ethg[10];
        }
    connections:
        bus.ethg++ <--> C100  <--> host_1_H_A.ethg;
        bus.ethg++ <--> C100  <--> host_1_H_B.ethg;
        bus.ethg++ <--> C100  <--> host_2_H_A.ethg;
        bus.ethg++ <--> C100  <--> host_2_H_B.ethg;
        bus.ethg++ <--> C100  <--> host_3_H_A.ethg;
        bus.ethg++ <--> C100  <--> host_3_H_B.ethg;
        bus.ethg++ <--> C100  <--> host_4_H_A.ethg;
        bus.ethg++ <--> C100  <--> host_4_H_B.ethg;
        bus.ethg++ <--> C100  <--> host_5_H_A.ethg;
        bus.ethg++ <--> C100  <--> host_5_H_B.ethg;
}

%#--------------------------------------------------------------------------------------------------------------
%inifile: omnetpp.ini
[General]
sim-time-limit = 5s

tkenv-plugin-path = ../../../etc/plugins
#record-eventlog = true
**.vector-recording = false

network = SpeedTest

*.host_1_H_A.cli.destAddress = "host_1_H_B"
*.host_1_H_B.cli.destAddress = "host_1_H_A"

*.host_2_H_A.cli.destAddress = "host_2_H_B"
*.host_2_H_B.cli.destAddress = "host_2_H_A"

*.host_3_H_A.cli.destAddress = "host_3_H_B"
*.host_3_H_B.cli.destAddress = "host_3_H_A"

*.host_4_H_A.cli.destAddress = "host_4_H_B"
*.host_4_H_B.cli.destAddress = "host_4_H_A"

*.host_5_H_A.cli.destAddress = "host_5_H_B"
*.host_5_H_B.cli.destAddress = "host_5_H_A"


**.cli.reqLength = 1250B       # 10.000 bit
**.cli.respLength = 1250B      # 10.000 bit
*.host_*_*.cli.startTime = 0s

*.host_*_F_*.mac.duplexEnabled = true
*.host_*_H_*.mac.duplexEnabled = false

*.host_*_F_*.cli.waitTime  = 1ms        # 10.000 / speed [ / 2 when halfduplex]
*.host_*_H_*.cli.waitTime  = 0.1ms        # 10.000 / speed [ / 2 when halfduplex]

**.mac.address = "auto"

# Check: "rx channel idle (%)" <= 4.0
# Check: "rx channel utilization (%)" >= 96.0

%#--------------------------------------------------------------------------------------------------------------
%postprocess-script: check.r
#!/usr/bin/env Rscript

options(echo=FALSE)
options(width=160)
library("omnetpp", warn.conflicts=FALSE)

#TEST parameters
scafile <- 'results/General-0.sca'
linecount <- 10
idlelimit <- 4.0
usedlimit <- 96.0

# begin TEST:

idle <- loadDataset(scafile, add(type='scalar', select='name("rx channel idle *")'))
used <- loadDataset(scafile, add(type='scalar', select='name("rx channel utilization *")'))

cat("\nOMNETPP TEST RESULT: ")

if(length(idle$scalars$value) == linecount && max(idle$scalars$value) <= idlelimit)
{
    cat("IDLE OK\n")
} else {
    cat("IDLE BAD:\n")
    print(idle$scalars[idle$scalars$value > idlelimit,])
}

cat("\nOMNETPP TEST RESULT: ")

if(length(used$scalars$value) == linecount && min(used$scalars$value) >= usedlimit)
{
    cat("USED OK\n")
} else {
    cat("USED BAD:\n")
    print(used$scalars[used$scalars$value < usedlimit,])
}

cat("\n")
%#--------------------------------------------------------------------------------------------------------------
%contains: check.r.out

OMNETPP TEST RESULT: IDLE OK

OMNETPP TEST RESULT: USED OK

%#--------------------------------------------------------------------------------------------------------------
